---
name: Diff Lint

on: [pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: actions/setup-node@v4
    - uses: tj-actions/changed-files@v42
      id: changed-files
      with:
        files: '**/*.md'
    - env:
        CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
      run: |
        URL_PREFIX="https://github.com/DavidAnson/markdownlint/blob/main/doc/"
        BASE_REF="${{ github.event.pull_request.base.ref }}"
        BASE_CLONE_URL="${{ github.event.pull_request.base.repo.clone_url }}"
        HEAD_CLONE_URL="${{ github.event.pull_request.head.repo.clone_url }}"
        npm install -g markdownlint-cli2

        remote=origin
        if [ "$BASE_CLONE_URL" != "$HEAD_CLONE_URL" ]; then
          remote=base
          git remote add base "$BASE_CLONE_URL"
          git fetch base "$BASE_REF"
        fi

        declare -A files_with_failures start_ranges end_ranges
        for file in ${CHANGED_FILES}; do
          start_ranges=()
          end_ranges=()
          ranges=$(git diff "$remote"/"$BASE_REF" \
                   --diff-algorithm=histogram \
                   --diff-filter=ACM \
                   --find-renames=100% \
                   --no-ext-diff \
                   --relative \
                   --unified=0 -- "$file" | \
            awk 'match($0, /^@@\s-[0-9,]+\s\+([0-9]+)(,([0-9]+))?/, m) { \
                       print m[1] ":" m[1] + ((m[3] == "") ? "0" : m[3]) }')
          i=0
          for range in $ranges; do
            start_ranges["$i"]=$(echo "$range" | awk -F: '{print $1}')
            end_ranges["$i"]=$(echo "$range" | awk -F: '{print $2}')
            i=$((1 + i))
          done

          i=0
          markdownlint-cli2 "$file" 2>/dev/null || true
          while IFS= read -r line; do
            line_number=$(echo "$line" | awk -F: '{print $2}' | awk '{print $1}')
            while [ "$line_number" -gt "${end_ranges[$i]}" ] && [ "$i" -lt "${#end_ranges[@]}" ]; do
              i=$((1 + i))
            done
            rule=$(echo "$line" | awk 'match($2, /([^\/]+)/, m) {print tolower(m[1])}')
            lint_error="$line ($URL_PREFIX$rule.md)"
            if [ "$line_number" -ge "${start_ranges[$i]}" ] && [ "$line_number" -le "${end_ranges[$i]}" ]; then
              echo "::add-matcher::.github/workflows/markdownlint-problem-matcher.json"
              echo "$lint_error"
              echo "::remove-matcher owner=markdownlint::"
              files_with_failures["$file"]=1
            else
              echo "::warning::$lint_error"
            fi
          done < <(markdownlint-cli2 "$file" 2>&1 >/dev/null || true)
        done

        echo "Finished linting"
        for file in "${!files_with_failures[@]}"; do
          echo "::error::$file has linting issues"
        done
        if [ "${#files_with_failures[@]}" -gt "0" ]; then
          exit 1
        fi
